<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx Experience</title>
    <link>/</link>
    <description>Recent content on Nginx Experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jul 2020 14:37:59 +0300</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS Workshop environment</title>
      <link>/010_intro/005_workshop_path/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/010_intro/005_workshop_path/</guid>
      <description>There are two ways of doing the workshop, as part of an AWS event or on your own. Please click the relevant path.
 AWS Workshop On your own  </description>
    </item>
    
    <item>
      <title>Accessing the Nginx Controller</title>
      <link>/060_controller/010_accessing_controller/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_controller/010_accessing_controller/</guid>
      <description>The Nginx Controller has already been deployed with the terraform declaration, we need to find the public IP address.  cd terraformexport controller_ip=$(terraform state show &amp;quot;aws_instance.controller&amp;quot; | grep &amp;quot;public_ip&amp;quot; | grep -v &amp;quot;associate_public_ip_address&amp;quot; | cut -d&#39;&amp;quot;&#39; -f2)curl -k -c cookie.txt -X POST --url &amp;quot;https://$controller_ip/api/v1/platform/login&amp;quot; --header &#39;Content-Type: application/json&#39; --data &#39;{&amp;quot;credentials&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;BASIC&amp;quot;,&amp;quot;username&amp;quot;: &amp;quot;nginx@f5.com&amp;quot;,&amp;quot;password&amp;quot;: &amp;quot;Admin2020&amp;quot;}}&#39;export controller_apikey=$(curl -k -sb cookie.txt -c cookie.txt https://$controller_ip/api/v1/platform/global | jq .currentStatus.agentSettings.apiKey | tr -d &#39;&amp;quot;&#39;)terraform state show &amp;quot;aws_instance.</description>
    </item>
    
    <item>
      <title>App deployment</title>
      <link>/030_application/010_app_deployment_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/030_application/010_app_deployment_1/</guid>
      <description>Deploy the app  kubectl apply -f files/5ingress/1arcadia_delpoy.yamlOutput
deployment.apps/arcadia-db createdservice/arcadia-db createddeployment.apps/arcadia-frontend createdservice/arcadia-frontend createddeployment.apps/arcadia-login createdservice/arcadia-login createddeployment.apps/arcadia-stock-transaction createdservice/arcadia-stock-transaction createddeployment.apps/arcadia-stocks createdservice/arcadia-stocks createddeployment.apps/arcadia-users createdservice/arcadia-users created Check that all is deployed and working as expected:  kubectl get podsOutput
NAME READY STATUS RESTARTS AGEarcadia-db-696f979799-sdzb6 1/1 Running 0 36sarcadia-frontend-57ff4f888-v4ggh 1/1 Running 0 36sarcadia-login-c995f8dcc-7gvvp 1/1 Running 0 35sarcadia-stock-transaction-b996cddb9-xzckf 1/1 Running 0 34sarcadia-stocks-dd58548f7-k7tg7 1/1 Running 0 34sarcadia-users-768dddd844-8s75q 1/1 Running 0 33s kubectl get svc -owideOutput</description>
    </item>
    
    <item>
      <title>AWS Workshop Portal</title>
      <link>/010_intro/aws_event/010_aws_wokshop_portal_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/010_intro/aws_event/010_aws_wokshop_portal_1/</guid>
      <description>This workshop creates an AWS account and a Cloud9 environment. You will need the Participant Hash provided upon entry, and your email address to track your unique session.
 Connect to the portal by clicking the button or browsing to https://dashboard.eventengine.run/. The following screen shows up.  Enter the provided hash in the text box. The button on the bottom right corner changes to Accept Terms &amp;amp; Login. Click on that button to continue.</description>
    </item>
    
    <item>
      <title>Nginx Kubernetes Ingress Installation</title>
      <link>/040_ingress/010_ingress_install_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/040_ingress/010_ingress_install_1/</guid>
      <description>We are going to use the Nginx installation manifests based on the Nginx Ingress Controller installation guide. For simplicity - we have already prepared the installation in a single yaml file.
 Run the command bellow:  ./files/5ingress/ingress_install.shOutput
Starting Nginx Ingress InstallCloning into &amp;#39;kubernetes-ingress&amp;#39;...remote: Enumerating objects: 1270, done.remote: Counting objects: 100% (1270/1270), done.remote: Compressing objects: 100% (799/799), done.remote: Total 34666 (delta 552), reused 1008 (delta 422), pack-reused 33396Receiving objects: 100% (34666/34666), 46.</description>
    </item>
    
    <item>
      <title>Remove configuration</title>
      <link>/070_cleanup/010_cleanup/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/070_cleanup/010_cleanup/</guid>
      <description> In order to delete the resources created during this workshop, run the commands below:  kubectl delete --all svc --namespace=nginx-ingresskubectl delete --all svc --namespace=defaultcd terraformterraform destroy --auto-approveÂ Finally, delete the previously created Cloud9 stack in the CloudFormation console.  Please note: This will also delete the Cloud9 IDE instance.
</description>
    </item>
    
    <item>
      <title>Service Mesh Overview</title>
      <link>/050_service_mesh/010_mesh_explanation_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/050_service_mesh/010_mesh_explanation_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Terraform Apply</title>
      <link>/020_terraform/010_terraform_apply_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/020_terraform/010_terraform_apply_1/</guid>
      <description>Go to the &amp;ldquo;terraform&amp;rdquo; directory where we can find the terraform plan.  cd terraform Run the following commands, terraform plan will show us what it is going to be deployed in AWS by Terraform:  terraform init terraform plan Now let&amp;rsquo;s deploy the environment  terraform apply --auto-approve It will take around 10 minutes for Terraform and AWS to finish the initial deployment.
Please continue to the next page to learn about Kubernetes and Amazon EKS basics.</description>
    </item>
    
    <item>
      <title>Waf deployment</title>
      <link>/060_security/010_waf_deployment/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/010_waf_deployment/</guid>
      <description>Create the Nginx WAF config, which can be found in the &amp;ldquo;files/7waf/waf-config.yaml&amp;rdquo; file.  kubectl apply -f files/7waf/waf-config.yamlThe WAF policy is json based and from the example bellow, you can observe how all the configuration can be changed based on the application needs:
{&amp;quot;name&amp;quot;: &amp;quot;nginx-policy&amp;quot;,&amp;quot;template&amp;quot;: { &amp;quot;name&amp;quot;: &amp;quot;POLICY_TEMPLATE_NGINX_BASE&amp;quot; },&amp;quot;applicationLanguage&amp;quot;: &amp;quot;utf-8&amp;quot;,&amp;quot;enforcementMode&amp;quot;: &amp;quot;blocking&amp;quot;,&amp;quot;signature-sets&amp;quot;: [{&amp;quot;name&amp;quot;: &amp;quot;All Signatures&amp;quot;,&amp;quot;block&amp;quot;: false,&amp;quot;alarm&amp;quot;: true},{&amp;quot;name&amp;quot;: &amp;quot;High Accuracy Signatures&amp;quot;,&amp;quot;block&amp;quot;: true,&amp;quot;alarm&amp;quot;: true}],&amp;quot;blocking-settings&amp;quot;: {&amp;quot;violations&amp;quot;: [{&amp;quot;name&amp;quot;: &amp;quot;VIOL_RATING_NEED_EXAMINATION&amp;quot;,&amp;quot;alarm&amp;quot;: true,&amp;quot;block&amp;quot;: true},{&amp;quot;name&amp;quot;: &amp;quot;VIOL_HTTP_PROTOCOL&amp;quot;,&amp;quot;alarm&amp;quot;: true,&amp;quot;block&amp;quot;: true,&amp;quot;learn&amp;quot;: true},{&amp;quot;name&amp;quot;: &amp;quot;VIOL_FILETYPE&amp;quot;,&amp;quot;alarm&amp;quot;: true,&amp;quot;block&amp;quot;: true,&amp;quot;learn&amp;quot;: true},{&amp;quot;name&amp;quot;: &amp;quot;VIOL_COOKIE_MALFORMED&amp;quot;,&amp;quot;alarm&amp;quot;: true,&amp;quot;block&amp;quot;: false,&amp;quot;learn&amp;quot;: false}],&amp;quot;http-protocols&amp;quot;: [{&amp;quot;description&amp;quot;: &amp;quot;Body in GET or HEAD requests&amp;quot;,&amp;quot;enabled&amp;quot;: true,&amp;quot;learn&amp;quot;: true,&amp;quot;maxHeaders&amp;quot;: 20,&amp;quot;maxParams&amp;quot;: 500}],&amp;quot;filetypes&amp;quot;: [{&amp;quot;name&amp;quot;: &amp;quot;*&amp;quot;,&amp;quot;type&amp;quot;: &amp;quot;wildcard&amp;quot;,&amp;quot;allowed&amp;quot;: true,&amp;quot;responseCheck&amp;quot;: true}],&amp;quot;data-guard&amp;quot;: {&amp;quot;enabled&amp;quot;: true,&amp;quot;maskData&amp;quot;: true,&amp;quot;creditCardNumbers&amp;quot;: true,&amp;quot;usSocialSecurityNumbers&amp;quot;: true},&amp;quot;cookies&amp;quot;: [{&amp;quot;name&amp;quot;: &amp;quot;*&amp;quot;,&amp;quot;type&amp;quot;: &amp;quot;wildcard&amp;quot;,&amp;quot;accessibleOnlyThroughTheHttpProtocol&amp;quot;: true,&amp;quot;attackSignaturesCheck&amp;quot;: true,&amp;quot;insertSameSiteAttribute&amp;quot;: &amp;quot;strict&amp;quot;}],&amp;quot;evasions&amp;quot;: [{&amp;quot;description&amp;quot;: &amp;quot;%u decoding&amp;quot;,&amp;quot;enabled&amp;quot;: true,&amp;quot;learn&amp;quot;: false,&amp;quot;maxDecodingPasses&amp;quot;: 2}]}}Deploy ELK in order to be able to visualize and analyze the traffic going through the Nginx WAF  kubectl apply -f files/7waf/elk.</description>
    </item>
    
    <item>
      <title>AWS EKS</title>
      <link>/020_terraform/020_eks_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/020_terraform/020_eks_1/</guid>
      <description>While you wait, you can review the Introduction section of the AWS EKS Workshop to learn about Kubernetes and Amazon EKS basics.
Managed control plane Amazon EKS provides a scalable and highly-available control plane that runs across multiple AWS availability zones. The Amazon EKS service automatically manages the availability and scalability of the Kubernetes API servers and the etcd persistence layer for each cluster. Amazon EKS runs the Kubernetes control plane across three Availability Zones in order to ensure high availability, and it automatically detects and replaces unhealthy masters.</description>
    </item>
    
    <item>
      <title>Cloud Formation</title>
      <link>/010_intro/selfpaced/020_cloudformation_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/010_intro/selfpaced/020_cloudformation_1/</guid>
      <description>Click the bellow button and deploy the template:  
 Click Next and enter a unique &amp;ldquo;Stack name&amp;rdquo;
  Click Next 2 times accepting all the defaults, but make sure the following is selected on the last screen:
  Click Create stack.  Wait until the stack Status is CREATE_COMPLETE.</description>
    </item>
    
    <item>
      <title>Microgateway deployment</title>
      <link>/060_controller/020_microgateway/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_controller/020_microgateway/</guid>
      <description>Deploy the microgateway with the following configuration.  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: apps/v1kind: Deploymentmetadata:name: microgatewayspec:replicas: 1selector:matchLabels:app: microgatewaytemplate:metadata:labels:app: microgatewayspec:containers:- name: microgateway1image: sorinboia/ngtest:3.4imagePullPolicy: Alwaysenv:- name: API_KEYvalue: $controller_apikey- name: CTRL_HOSTvalue: $controller_ip- name: HOSTNAMEvalue: microgateway1 ports:- containerPort: 80readinessProbe:exec:command:- curl- 127.</description>
    </item>
    
    <item>
      <title>Nginx Service Mesh deployment</title>
      <link>/050_service_mesh/020_nsm_deploy/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/050_service_mesh/020_nsm_deploy/</guid>
      <description>Deploy all Nginx components in the Kubernetes environment  nginx-meshctl deploy --registry-server &amp;quot;sorinboia&amp;quot; --image-tag 0.9.0 --sample-rate 1 --disable-auto-injectOutput
Deploying NGINX Service Mesh Control Plane in namespace &amp;#34;nginx-mesh&amp;#34;...Created namespace &amp;#34;nginx-mesh&amp;#34;.Created SpiffeID CRD.Waiting for SPIRE to be running...done.Deployed Spire.Deployed NATS server.Created traffic policy CRDs.Deployed Mesh API.Deployed Metrics API Server.Deployed Prometheus Server nginx-mesh/prometheus.Deployed Grafana nginx-mesh/grafana.Deployed tracing server nginx-mesh/zipkin.All resources created.</description>
    </item>
    
    <item>
      <title>Publish the app</title>
      <link>/040_ingress/020_ingress_01/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/040_ingress/020_ingress_01/</guid>
      <description>Expose all the application services and route traffic based on the HTTP path. We will start with a basic configuration.
 Expose Arcadia to the world.  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: k8s.nginx.org/v1kind: VirtualServermetadata:name: arcadiaspec:host: $nginx_ingress upstreams:- name: arcadia-usersservice: arcadia-usersport: 80- name: arcadia-loginservice: arcadia-loginport: 80- name: arcadia-stocksservice: arcadia-stocksport: 80- name: arcadia-stock-transactionservice: arcadia-stock-transactionport: 80- name: arcadia-frontendservice: arcadia-frontendport: 80routes:- path: /v1/user action:pass: arcadia-users- path: /v1/login action:pass: arcadia-login- path: /v1/stock action:pass: arcadia-stocks- path: /v1/stockt action:pass: arcadia-stock-transaction- path: / action:pass: arcadia-frontendEOFNote how the various HTTP paths (/, /api/, /app3/) are routed by Ingress to the relevant K8s services.</description>
    </item>
    
    <item>
      <title>Testing the Waf</title>
      <link>/060_security/020_testing/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/020_testing/</guid>
      <description>Browse again to the Arcadia web app and verify that it is still working.
  Let&amp;rsquo;s simulate a Cross Site Scripting (XSS) attack, and make sure it&amp;rsquo;s blocked:
  https://&amp;lt;INGRESS-EXTERNAL-IP&amp;gt;/trading/index.php?a=%3Cscript%3Ealert(%27xss%27)%3C/script%3E
Each of the blocked requests will generate a support ID, save it for later.
Browse to the ELK as before and click the &amp;ldquo;Discover&amp;rdquo; button:  Here, you&amp;rsquo;ll see all the request logs, allowed and blocked, sent by the Nginx WAF to ELK.</description>
    </item>
    
    <item>
      <title>Build the configuration</title>
      <link>/060_controller/030_configuration/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_controller/030_configuration/</guid>
      <description>Create an environment  &amp;ldquo;N&amp;rdquo; -&amp;gt; &amp;ldquo;Services&amp;rdquo; -&amp;gt; &amp;ldquo;Environments&amp;rdquo; -&amp;gt; &amp;ldquo;Create Environment&amp;rdquo; In all the fields, enter the following value: prod.
Click on &amp;ldquo;View API Request&amp;rdquo;.
All the configuration on the Nginx Controller can be easlly automated with external orchestration systems, this view can help you in understanding how to generate the configuration API calls.
The output will look like this: Output
{&amp;#34;metadata&amp;#34;: {&amp;#34;name&amp;#34;: &amp;#34;prod&amp;#34;,&amp;#34;displayName&amp;#34;: &amp;#34;prod&amp;#34;,&amp;#34;description&amp;#34;: &amp;#34;prod&amp;#34;,&amp;#34;tags&amp;#34;: [&amp;#34;prod&amp;#34;]},&amp;#34;desiredState&amp;#34;: {}}</description>
    </item>
    
    <item>
      <title>EKS Verification</title>
      <link>/020_terraform/030_eks_verification_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/020_terraform/030_eks_verification_1/</guid>
      <description>Wait for Terraform to finish and verify the deployment is working as expected and we are able to control the Kubernetes environment.
 We need to save the remote access config for the Kubernetes cluster locally:  mkdir ~/.kube/ terraform output &amp;gt; ~/.kube/configCheck and see that our cluster is up an running.
Below we should see our two K8s worker nodes:  kubectl get nodesOutput
NAME STATUS ROLES AGE VERSION ip-10-0-2-32.</description>
    </item>
    
    <item>
      <title>Enable https and monitoring</title>
      <link>/040_ingress/030_health_https_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/040_ingress/030_health_https_1/</guid>
      <description>In our next step we will finish this part of the configuration, we will implement the following:
 Enable health checks Enable https for the application and redirect http requests to https   Apply the configuration.  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: v1data:tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZMRENDQkJTZ0F3SUJBZ0lTQTUrVmpoQmN3NUJKNWk0QXU2VGl0L3h0TUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNVEF4TVRjeE1USXpNek5hRncweU1UQTBNVGN4TVRJek16TmFNQjR4SERBYUJnTlZCQU1NCkV5b3VZWEpqWVdScFlXTnllWEIwYnk1dVpYUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUsKQW9JQkFRRE1LQkNYWHdaL0xQbzNmM2pMR3IvamhNRXNTZmdrT3ErOGtOUEpxVzdPbGtCazRrZWtlaEtFVVVDQwowUHdUazgrbnp0Skg3bzBEOUNaaEZuVW9pSGVnZkRzTURFNWFoVXh4blQ1czlmWHZvRlJqSnlYUUR0VlhvR1VQCk1ubzJlVkdYYi81Qm1LeVNJMDVpQ3B5SCtNVC9YRHFhd3BhV2ZsTDJ5OXpZK1V2NGlkQVhsZFpDUnBVSEhOV1cKZjhPeUMvcFJiZndhYVYzRDJ6RjFaeHJ6Z2JIcWd3WXpkRHNnYXVkdk56N0pocytDaENxL1JQNWhMSGNkNzV5bQo1bmppTFZsVmcvYUZJS09IT2wyZ1RFdnQ4WWdjTXdUSWgwNjRrcWpVS3g5UDBmQkpZSzNwV0ZoelhwaENHaWd1CjdTd3EyYnpGTkZabjY1SEdtSDBJY1RLMVlNSm5BZ01CQUFHamdnSk9NSUlDU2pBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpIUVlEVlIwT0JCWUVGSXhRMk9EMjhFWjVaVkNTRmNBTlVLbEdqcTFVTUI4R0ExVWRJd1FZTUJhQUZCUXVzeGUzCldGYkxybEFKUU9ZZnI1MkxGTUxHTUZVR0NDc0dBUVVGQndFQkJFa3dSekFoQmdnckJnRUZCUWN3QVlZVmFIUjAKY0RvdkwzSXpMbTh1YkdWdVkzSXViM0puTUNJR0NDc0dBUVVGQnpBQ2hoWm9kSFJ3T2k4dmNqTXVhUzVzWlc1agpjaTV2Y21jdk1CNEdBMVVkRVFRWE1CV0NFeW91WVhKallXUnBZV055ZVhCMGJ5NXVaWFF3VEFZRFZSMGdCRVV3ClF6QUlCZ1puZ1F3QkFnRXdOd1lMS3dZQkJBR0MzeE1CQVFFd0tEQW1CZ2dyQmdFRkJRY0NBUllhYUhSMGNEb3YKTDJOd2N5NXNaWFJ6Wlc1amNubHdkQzV2Y21jd2dnRUVCZ29yQmdFRUFkWjVBZ1FDQklIMUJJSHlBUEFBZHdCRQpsR1V1c083T3I4UkFCOWlvL2lqQTJ1YUN2dGpMTWJVLzB6T1d0YmFCcUFBQUFYY1FUTzdSQUFBRUF3QklNRVlDCklRQ3hMK0hhdnVOY1kzRU0yNllwN0JEeTA1TW8yTUxreHYrdE5nMHA0QmRVQlFJaEFOT1dIWmR1Z056UHl4MEkKOU5VWHVOL09JaGlnS2RGMjhlMmM0TWV3dVRmVEFIVUE5bHlVTDlGM01DSVVWQmdJTUpSV2p1Tk5FeGt6djk4TQpMeUFMekU3eFpPTUFBQUYzRUV6d3V3QUFCQU1BUmpCRUFpQWwvNEZaL1ZwR1NRV3pwdUc2Q0ljWUdHOG4wM1ZZCmRTQnFxUlFHbWUxdnVnSWdRMXg3cnRqYXhrcDNRd3FweWhYRXJyWjhPN3lIdTF2di9pdFhWR1haZzBjd0RRWUoKS29aSWh2Y05BUUVMQlFBRGdnRUJBSnh0Zmk1NmxxZ1RFUEJ6NE82R2xZclJYOVlnL3Y5cUMwWE1DazFSWlJWRApuRldQcTBQUFRWeWR3UTRsOVZQMWhlaTZhNUY0R2xQOVFzaFk3TS9CRFA0SmgwR3pOYnBCY2h4Slc2MHBuUXEzCjI4WmovNzVhamVycTFxYnEvbXpIZHhGcGVzTkVON3NYbUpzNGsrM1pOeWs3N1lXRVhsb1BDMk9STGM2MmhWWlAKdk1sYXZycmNmYWFGNTYvZkR3QzdRd2JZa3JHQzEycFZ4STMzNlFQSGJrRVE2SDNhWGUweE9Dem4rUnZxdXRMTwpqNjh2UVExWG5LdktLc0dCTVNGM29QaGYxZHZtbi9pZHBtK1RjdFJ3ZmUzTGtrL2JpZEJ2a2pJam5jb05HR1pTCllLSFVybmRzMWpDclRVTnI0RFgwTlY5bFNVOG5jUzdMMFBFOGxuUXYrWjg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVaVENDQTAyZ0F3SUJBZ0lRUUFGMUJJTVVwTWdoaklTcERCYk4zekFOQmdrcWhraUc5dzBCQVFzRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEl3TVRBd056RTVNakUwTUZvWERUSXhNRGt5T1RFNU1qRTBNRm93Ck1qRUxNQWtHQTFVRUJoTUNWVk14RmpBVUJnTlZCQW9URFV4bGRDZHpJRVZ1WTNKNWNIUXhDekFKQmdOVkJBTVQKQWxJek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdXdJVktNejJvSlRURHhMcwpqVldTdy9pQzhabW1la0tJcDEwbXFyVXJ1Y1ZNc2ErT2EvbDF5S1BYRDBlVUZGVTFWNHllcUtJNUdmV0NQRUtwClRtNzFPOE11MjQzQXNGenpXVGpuN2M5cDhGb0xHNzdBbENRbGgvbzNjYk1UNXh5czRadnYyK1E3UlZKRmxxbkIKVTg0MHlGTHV0YTd0ajk1Z2NPS2xWS3UyYlE2WHBVQTBheXZUdkdiclpqUjgrbXVMajFjcG1mZ3dGMTI2Y20vNwpnY1d0MG9aWVBSZkg1d203OFN2M2h0ekIybkZkMUVianpLMGx3WWk4WUdkMVpyUHhHUGVpWE9aVC96cUl0a2VsCi94TVk2cGdKZHorZFUvblBBZVgxcG5BWEZLOWpwUCtaczVPZDNGT25CdjVJaFIyaGFhNGxkYnNUekZJRDllMVIKb1l2YkZRSURBUUFCbzRJQmFEQ0NBV1F3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQURBT0JnTlZIUThCQWY4RQpCQU1DQVlZd1N3WUlLd1lCQlFVSEFRRUVQekE5TURzR0NDc0dBUVVGQnpBQ2hpOW9kSFJ3T2k4dllYQndjeTVwClpHVnVkSEoxYzNRdVkyOXRMM0p2YjNSekwyUnpkSEp2YjNSallYZ3pMbkEzWXpBZkJnTlZIU01FR0RBV2dCVEUKcDdHa2V5eHgrdHZoUzVCMS84UVZZSVdKRURCVUJnTlZIU0FFVFRCTE1BZ0dCbWVCREFFQ0FUQS9CZ3NyQmdFRQpBWUxmRXdFQkFUQXdNQzRHQ0NzR0FRVUZCd0lCRmlKb2RIUndPaTh2WTNCekxuSnZiM1F0ZURFdWJHVjBjMlZ1ClkzSjVjSFF1YjNKbk1Ed0dBMVVkSHdRMU1ETXdNYUF2b0MyR0syaDBkSEE2THk5amNtd3VhV1JsYm5SeWRYTjAKTG1OdmJTOUVVMVJTVDA5VVEwRllNME5TVEM1amNtd3dIUVlEVlIwT0JCWUVGQlF1c3hlM1dGYkxybEFKUU9ZZgpyNTJMRk1MR01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFOQmdrcWhraUc5dzBCCkFRc0ZBQU9DQVFFQTJVemd5ZldFaURjeDI3c1Q0clA4aTJ0aUVteFl0MGwrUEFLM3FCOG9ZZXZPNEM1ejcwa0gKZWpXRUh4MnRhUERZL2xhQkwyMS9XS1p1TlRZUUhIUEQ1YjF0WGdIWGJuTDdLcUM0MDFkazVWdkNhZFRRc3ZkOApTOE1Yam9oeWM5ejkvRzI5NDhrTGptRTZGbGg5ZERZclZZQTl4Mk8raEVQR09hRU9hMWVlUHluQmdQYXl2VWZMCnFqQnN0ekxoV1ZRTEdBa1hYbU5zKzVablBCeHpESk9MeGhGMkpJYmVRQWNINUgwdFpyVWxvNVpZeU9xQTdzOXAKTzViODVvM0FNL09KK0NrdEZCUXRmdkJoY0pWZDl3dmx3UHNrK3V5T3kySEk3bU54S0tnc0JUdDM3NXRlQTJUdwpVZEhraFZOY3NBS1gxSDdHTk5MT0VBRGtzZDg2d3VvWHZnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRE1LQkNYWHdaL0xQbzMKZjNqTEdyL2poTUVzU2Zna09xKzhrTlBKcVc3T2xrQms0a2VrZWhLRVVVQ0MwUHdUazgrbnp0Skg3bzBEOUNaaApGblVvaUhlZ2ZEc01ERTVhaFV4eG5UNXM5Zlh2b0ZSakp5WFFEdFZYb0dVUE1ubzJlVkdYYi81Qm1LeVNJMDVpCkNweUgrTVQvWERxYXdwYVdmbEwyeTl6WStVdjRpZEFYbGRaQ1JwVUhITldXZjhPeUMvcFJiZndhYVYzRDJ6RjEKWnhyemdiSHFnd1l6ZERzZ2F1ZHZOejdKaHMrQ2hDcS9SUDVoTEhjZDc1eW01bmppTFZsVmcvYUZJS09IT2wyZwpURXZ0OFlnY013VEloMDY0a3FqVUt4OVAwZkJKWUszcFdGaHpYcGhDR2lndTdTd3EyYnpGTkZabjY1SEdtSDBJCmNUSzFZTUpuQWdNQkFBRUNnZ0VCQUxlRm1JeUtWb3ZDUWRmYjFoazJIYU1IOXFLNmg3OEJwbkpxK29lQXNPUXkKdXdZMVIxTzZqS1MzYWJkdTUvc3RWM0V4QVdTNk03ZUhKVzBIUkNCQXRORG1mQ256Y2dmN1plR0lDZExuTThMSwpMTEhKUWp1SzZndFFXeWhUSnZ1TENXYUp2VlQ0U3NFL3pibGljcDNrYWlwbm5TTDdvMlQ3ZjlidEljVkdMUjNvCklhNU1SWnZ3ZDRHZzBkakErNUIwNWhXU3lDT3k0OHJFVzVKMUdCdC90eTBlaHhEOVVUVS9nb0ViL1Q1TXY1OVYKMWY2elNjS0lHbTh3emx5UnVZbWZwTkwrYjFkdFVUb1NUdVA5R0loU3FWTFN1NUJpR2RTMk81MFhqOWVUQlFhRgpRZUtrN002dWdjanZtZHdzTW4vdHM1T2pvVjY0bk10QlNWemY1VWhJdm1rQ2dZRUE2aGQwZWFHK3J1TFhKTDQwCncreUVuUDZtTktYQkI3eVNTWkVtck1aOWxGVUFxOVdQUk9pZnQ5Tm1vc1BGWi9QMDNBcWFhb3cxTGJmdjBMMFQKQ0hyNkJZSGhtYkNVTjJ6TExrRjZSVnI4NUhtQUxjdVhyajVEM3pZd3lZVmVJOThzV0RZcGVsaWtnOUFnNUFtagpNc3ZBTnRYRElJQmlXTkFQQzJoWXhORisrTHNDZ1lFQTMwTm15ZDFzSi9UaFJvUFpoK2dMNmZ0S2RySE1EWk1zCjRHZkI5K2FDTDNtR3NwU094MTlHOHJmbG9ZU2xNTE5HdnlZcGo1SGg1aHJnQXc4aGVBS3BFRmxFVTdBcm54dVcKZmwwc2J3RkhwN05pZUZscGFPdzU2Mm9FN3c1M2pPRHBIQ1ZLSFphQ0lHZjVLSS9tQmRuVWZYZ1JzSzExdjZMTwpJaExYMFNSM3FFVUNnWUFscUpaTlJ1NzFGWHNFNXpCMzRHSEpHOUpESC9NNHVtWlNQVzZhVnVnMjU2SFBBdkVrClpjUGovN2RBTWZ4YzU4c1padjlHYXIzWFdBTFZjc1ZRRlBDSjJFWWh3bDFsdVRQS2dqQVlYalhXejVFR1RQMWUKdzVlSm5oOGxIRFp6ME9CQ1pKd3htWGNGMllLaERNZmJVUm5mK0cyR21nQzRSdWhVcm5teFYvNTBKd0tCZ0RmSAo2VWlLTDltVHp5MEZDRFp5ZlhlS04wS01qWVRldnBtYWt0WFRHN2VzejBDUzZWRmF0cWt4MVFlVDBvbm1ZTWlsClNrRDZtOHdYN3R3VXpiSGtTRVV6YUdUWVlTMnhnTm8xZ1VLQ3VWcG04VFZNY1krclpaVXh1ZVhZWVhvclAxS3UKNW1PYUZRenZyVXE3R1NkaEV6djk0YjJZdVJDV0pwWlF5dWNRQzIxWkFvR0FKbnNGeHl4ZmFXajFEVHUxcEttNQpTSHQvL0cyRGZteHhKQ05aTFZMUHJYVDJhWmdrNWQwMW5Zb3dydCtscCtiSXBLc09BS2MxamxtRVNwT2VaTEU1Cmk0UVV0eEs3SnV5dHNNZXdqUCtYdmc3VFNEN3d1bW95Vkh6RS9VOTBYcldPOVJJd1VlZFpmOFg4bjVPNCtaRisKeWpqaWNlcGY1ci9DaFNhZG1jM1RwMFk9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0Kkind: Secretmetadata:name: arcadia-wildcardtype: kubernetes.io/tls---apiVersion: k8s.nginx.org/v1kind: VirtualServermetadata:name: arcadiaspec:host: $nginx_ingress tls:secret: arcadia-wildcard # Represents the server certificateredirect:enable: true # Always redirect to https if incoming request is httpupstreams:- name: arcadia-usersservice: arcadia-usersport: 80healthCheck: # This is the most basic healthcheck config for more info follow this link https://docs.</description>
    </item>
    
    <item>
      <title>IAM Role</title>
      <link>/010_intro/selfpaced/030_iam_role_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/010_intro/selfpaced/030_iam_role_1/</guid>
      <description>  Follow this deep link to find your Cloud9 EC2 instance
  Select the instance, then choose Actions / Instance Settings / Attach/Replace IAM Role
  Choose eksworkshop-admin from the IAM Role drop down, and select Apply  </description>
    </item>
    
    <item>
      <title>Side Car Injection</title>
      <link>/050_service_mesh/030_side_car_injection/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/050_service_mesh/030_side_car_injection/</guid>
      <description> Inject the sidecar into the application pods  kubectl get deployment arcadia-frontend -oyaml | nsm inject | kubectl apply -f -kubectl get deployment arcadia-login -oyaml | nsm inject | kubectl apply -f -kubectl get deployment arcadia-stock-transaction -oyaml | nsm inject | kubectl apply -f -kubectl get deployment arcadia-stocks -oyaml | nsm inject | kubectl apply -f -kubectl get deployment arcadia-users -oyaml | nsm inject | kubectl apply -f -</description>
    </item>
    
    <item>
      <title>Authentication with Openid Connect and Okta</title>
      <link>/040_ingress/040_oidc_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/040_ingress/040_oidc_1/</guid>
      <description>Redeploy the front and microservice to a new version in order to use Openid.  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: apps/v1kind: Deploymentmetadata:name: arcadia-frontendspec:replicas: 2selector:matchLabels:app: arcadia-frontendtemplate:metadata:labels:app: arcadia-frontendspec:containers:- name: arcadia-frontendimage: sorinboia/arcadia-frontend:oktav0.1imagePullPolicy: Alwaysports:- containerPort: 80EOFNext we need to configure our Ingress controller to validate each request based on the JWT token and if valid add a custom header which indicates to the application the user.</description>
    </item>
    
    <item>
      <title>Cloud 9</title>
      <link>/010_intro/040_cloud9_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/010_intro/040_cloud9_1/</guid>
      <description>Open the Cloud9 console, and click on Open IDE. This will open a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and a terminal. We will be using it for the rest of the workshop.  Ad blockers, javascript disablers, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted.</description>
    </item>
    
    <item>
      <title>Import the OpenApi definition</title>
      <link>/060_controller/040_apis/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_controller/040_apis/</guid>
      <description>Next we are going to publish the application APIs to the world.
There are two ways of creating this configuration, the first one is manual similar to the way we performed the configuration until this point and the second one is described bellow.
As part of their development cycle, the developers of the Arcadia application are generating an OpenApi specification to describe their APIs.
We are going to use this API specification in order to publish the services to the world.</description>
    </item>
    
    <item>
      <title>Service Mesh Visibility</title>
      <link>/050_service_mesh/040_opentracing/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/050_service_mesh/040_opentracing/</guid>
      <description>In order to be able and trace and monitor all of our application calls we will need to expose the Grafana and Zipkin servers
 Expose Grapha and Zipkin  kubectl get svc -n nginx-mesh grafana -oyaml | sed &#39;s/ClusterIP/LoadBalancer/g&#39; | kubectl apply -f -kubectl get svc -n nginx-mesh zipkin -oyaml | sed &#39;s/ClusterIP/LoadBalancer/g&#39; | kubectl apply -f -Get the svc external ip  kubectl get svc grafana zipkin -n nginx-meshOutput</description>
    </item>
    
    <item>
      <title>Mesh Access List</title>
      <link>/050_service_mesh/050_mesh_acl/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/050_service_mesh/050_mesh_acl/</guid>
      <description>The Kubernetes networking environment by default is an open network without restrictions or limitations.
This means that any pod can access any other pod or service. This introduces potential risks.
Our arcadia-users exposes an internal API /v1/user_i/ which is used by the arcadia-login service only. This means that no other service should have access to it. Lets see what security implications this has:
 Access the arcadia-stocks pod. This pod is used only to get current crypto prices and nothing else.</description>
    </item>
    
    <item>
      <title>Mutual TLS</title>
      <link>/040_ingress/060_mtls_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/040_ingress/060_mtls_1/</guid>
      <description>Enabling MTLS on our Nginx Ingress Controller is quite simple.
 Create the Certificate Secret and a policy to use on the Virtual Server resource  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -kind: Secretmetadata:name: ingress-mtls-secretapiVersion: v1type: nginx.org/cadata:ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQvVENDQXVXZ0F3SUJBZ0lVSzdhbU14OFlLWG1BVG51SkZETDlWS2ZUR2ZNd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dZMHhDekFKQmdOVkJBWVRBbFZUTVFzd0NRWURWUVFJREFKRFFURVdNQlFHQTFVRUJ3d05VMkZ1SUVaeQpZVzVqYVhOamJ6RU9NQXdHQTFVRUNnd0ZUa2RKVGxneEREQUtCZ05WQkFzTUEwdEpRekVXTUJRR0ExVUVBd3dOCmEybGpMbTVuYVc1NExtTnZiVEVqTUNFR0NTcUdTSWIzRFFFSkFSWVVhM1ZpWlhKdVpYUmxjMEJ1WjJsdWVDNWoKYjIwd0hoY05NakF3T1RFNE1qQXlOVEkyV2hjTk16QXdPVEUyTWpBeU5USTJXakNCalRFTE1Ba0dBMVVFQmhNQwpWVk14Q3pBSkJnTlZCQWdNQWtOQk1SWXdGQVlEVlFRSERBMVRZVzRnUm5KaGJtTnBjMk52TVE0d0RBWURWUVFLCkRBVk9SMGxPV0RFTU1Bb0dBMVVFQ3d3RFMwbERNUll3RkFZRFZRUUREQTFyYVdNdWJtZHBibmd1WTI5dE1TTXcKSVFZSktvWklodmNOQVFrQkZoUnJkV0psY201bGRHVnpRRzVuYVc1NExtTnZiVENDQVNJd0RRWUpLb1pJaHZjTgpBUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTmFINVRzaTZzaUFsU085dEJnYmY3VVRwcWowMUhRTlQ2UjhtQy9pCjhLYXFaSW9XSUdvN2xhTW9xTDYydTc4ay9WOHM2Z0FJaU1DSzBjekFvTFhNSnlJQkxQeTg4Yzdtc2xwZXgxTkEKVmRtMkVTVkN6bVlERE1TT3FpVmszWmpYeC9URmo2QzhNRFhhRkZUWFg1dWdtbWdscnFCWlh0OVI5VVBwVTJMNwo1bEZ0NlJ2R3VGczgvbVZORVR5c1A0SFhCWlh2ZE9mdG1YWUkvK01hOW5CMzIzNjdmcTI0L0RKZ2YvK2xRbUsxCkJLR3poSTZSc1pSSmdWOXdpK1VuZTBYNjlaS2lLOFdXU3lZS252YnRrcHZuTDA2dGNJaXJZNi80UzZ4Sm1HRVQKZEJUNmVxc0NoSUpQUStWSEp5dTROdnV6WmVCUXpGdmMwNytnUGZkVWZra1FXODhDQXdFQUFhTlRNRkV3SFFZRApWUjBPQkJZRUZKUGdhcnFYa00rdEJ0djVhdndTUWhUQmpTU2VNQjhHQTFVZEl3UVlNQmFBRkpQZ2FycVhrTSt0CkJ0djVhdndTUWhUQmpTU2VNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUIKQUl3WXpoY0s4OWtRL0xGWjZFRHgrQWp2bnJTVSs1cmdwQkgrRjVTNUUyY3pXOE5rNXhySnl0Y0ZUbUtlKzZScwpENHlxeTZSVVFEeWNYaDlPelBjbzgzYTBoeFlCZ1M5MWtJa25wYWF4dndLRDJleWc3UGNnK1lkS1FhZFlMcUY0CmI3cWVtc1FVVkpOWHdkZS9VanRBejlEOTh4dngwM2hQY2Qwb2dzUUhWZ21BZVpFd2l3UzFmTy9WNUE4dTl3MEkKcHlJRTVReXlHcHNpS2dpalpiMmhrS05RVHVJcEhiVnFydVA4eEV6TlFnamhkdS9uUW5OYy9lRUltVUlrQkFUVQpiSHdQc2xwYzVhdVV1TXJxR3lEQ0p2QUJpV3J2SmE3Yi9XcmtDT3FUWVhtR2NGM0w1ZU9FeTBhYkp0M2NNcSs5CnJLTUNVQWlkNG0yNEthWnc3OUk2anNBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==---apiVersion: k8s.nginx.org/v1kind: Policymetadata:name: ingress-mtls-policyspec:ingressMTLS:clientCertSecret: ingress-mtls-secretverifyClient: &amp;quot;on&amp;quot;verifyDepth: 1EOFAttach the MTLS policy to the VS.  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: k8s.</description>
    </item>
    
    <item>
      <title>Publish the external APIs</title>
      <link>/060_controller/050_publish_apis/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_controller/050_publish_apis/</guid>
      <description>We are now going to publish the previously imported OpenApi definition.
 Publish the APIs:  &amp;ldquo;N&amp;rdquo; -&amp;gt; &amp;ldquo;Services&amp;rdquo; -&amp;gt; &amp;ldquo;APIs&amp;rdquo; -&amp;gt; Click &amp;ldquo;arcadia-api&amp;rdquo; -&amp;gt; Click &amp;ldquo;Add Published API&amp;rdquo; Fill in the data as described bellow   Name: arcadia-published-api
Click Next
  Environment: prod
App: arcadia-api
Gateways: api.arcadia.aws.cloud
Click Next
 We will now add the components that represent the workload for the main app that traffic will be sent to.</description>
    </item>
    
    <item>
      <title>Add authentication to the API</title>
      <link>/060_controller/060_add_auth/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_controller/060_add_auth/</guid>
      <description>Our APIs are published and now we will want to add authentication based on API Keys
 Create an Identity Provider:  &amp;ldquo;N&amp;rdquo; -&amp;gt; &amp;ldquo;Services&amp;rdquo; -&amp;gt; &amp;ldquo;Identity Provider&amp;rdquo; -&amp;gt; &amp;ldquo;Create an Identity Provider&amp;rdquo;  Name: api-protect
Environment: prod
Type: API Key
 Under &amp;ldquo;API Clients&amp;rdquo;
 Name: test-client
Key: 1234567890
Click Submit
 Go the the edit mode of APIs we have previously published  &amp;ldquo;N&amp;rdquo; -&amp;gt; &amp;ldquo;Services&amp;rdquo; -&amp;gt; &amp;ldquo;APIs&amp;rdquo; -&amp;gt; Click &amp;ldquo;arcadia-api&amp;rdquo; -&amp;gt; Click the edit icon Attach the new Identity Provider to the APIs   Click &amp;ldquo;Routing&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>/060_controller/070_summary/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_controller/070_summary/</guid>
      <description>All of our microgateway API configuration is complete. We have published external APIs and are able to route, authenticate and view statistics for traffic coming from API clients. We have achieved the bellow architecture:</description>
    </item>
    
    <item>
      <title></title>
      <link>/050_service_mesh/060_external_acl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/050_service_mesh/060_external_acl/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>/060_security/tmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/060_security/tmp/</guid>
      <description>cat &amp;laquo; EOF | kubectl apply -f - apiVersion: appprotect.f5.com/v1beta1 kind: APPolicy metadata: name: attacksigs spec: policy: name: attacksigs template: name: POLICY_TEMPLATE_NGINX_BASE applicationLanguage: utf-8 enforcementMode: blocking signature-sets: - name: All Signatures block: true alarm: true
 apiVersion: appprotect.f5.com/v1beta1 kind: APLogConf metadata: name: logconf spec: content: format: default max_message_size: 64k max_request_size: any filter: request_type: all apiVersion: k8s.nginx.org/v1 kind: Policy metadata: name: waf-policy spec: waf: enable: true apPolicy: &amp;ldquo;default/attacksigs&amp;rdquo; securityLog: enable: true apLogConf: &amp;ldquo;default/logconf&amp;rdquo; logDest: &amp;ldquo;syslog:server=127.</description>
    </item>
    
  </channel>
</rss>