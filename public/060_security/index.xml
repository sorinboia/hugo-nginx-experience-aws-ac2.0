<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Nginx Experience</title>
    <link>/060_security/</link>
    <description>Recent content in Security on Nginx Experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jul 2020 14:37:59 +0300</lastBuildDate>
    
	<atom:link href="/060_security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ELK deployment</title>
      <link>/060_security/010_elk_deployment/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/010_elk_deployment/</guid>
      <description>Deploy ELK in order to be able to visualize and analyze the traffic going through the Nginx App Protect web application firewall  kubectl apply -f files/6waf/elk.yamlIn order to connect to our ELK pod, we will need to find the public address of this service:  kubectl get svc elk-webOutput
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEelk-web LoadBalancer 172.20.179.34 a28bd2d8c94214ae0b512274daa06211-2103709514.eu-central-1.elb.amazonaws.com 5601:32471/TCP,9200:32589/TCP,5044:31876/TCP 16h 3. Verify that ELK is up and running by browsing to: http://[ELK-EXTERNAL-IP]:5601/.</description>
    </item>
    
    <item>
      <title>Nginx App Protect deployment</title>
      <link>/060_security/020_nap_deployment/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/020_nap_deployment/</guid>
      <description>Prepare the Nap config  export elk_log=$(kubectl get svc elk-log | tr -s &amp;quot; &amp;quot; | cut -d&#39; &#39; -f3 | grep -v &amp;quot;CLUSTER-IP&amp;quot;)cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: appprotect.f5.com/v1beta1kind: APPolicymetadata: name: attacksigsspec:policy:name: attacksigstemplate:name: POLICY_TEMPLATE_NGINX_BASEapplicationLanguage: utf-8enforcementMode: blockingsignature-sets:- name: All Signaturesblock: truealarm: true---apiVersion: appprotect.f5.com/v1beta1kind: APLogConfmetadata:name: logconfspec:content:format: defaultmax_message_size: 64kmax_request_size: anyfilter:request_type: all---apiVersion: k8s.</description>
    </item>
    
    <item>
      <title>Bot Protection</title>
      <link>/060_security/030_bot_protection/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/030_bot_protection/</guid>
      <description> Apply the bot config  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: appprotect.f5.com/v1beta1kind: APPolicymetadata: name: attacksigsspec:policy:name: attacksigstemplate:name: POLICY_TEMPLATE_NGINX_BASEapplicationLanguage: utf-8enforcementMode: blockingsignature-sets:- name: All Signaturesblock: truealarm: true# The bellow config is in charge of defining what bot to block and whom to allow bot-defense:settings:isEnabled: truemitigations:classes:- name: trusted-botaction: alarm- name: untrusted-botaction: block- name: malicious-botaction: blockEOF</description>
    </item>
    
    <item>
      <title></title>
      <link>/060_security/tmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/060_security/tmp/</guid>
      <description>cat &amp;laquo; EOF | kubectl apply -f - apiVersion: appprotect.f5.com/v1beta1 kind: APPolicy metadata: name: attacksigs spec: policy: name: attacksigs template: name: POLICY_TEMPLATE_NGINX_BASE applicationLanguage: utf-8 enforcementMode: blocking signature-sets: - name: All Signatures block: true alarm: true
 apiVersion: appprotect.f5.com/v1beta1 kind: APLogConf metadata: name: logconf spec: content: format: default max_message_size: 64k max_request_size: any filter: request_type: all apiVersion: k8s.nginx.org/v1 kind: Policy metadata: name: waf-policy spec: waf: enable: true apPolicy: &amp;ldquo;default/attacksigs&amp;rdquo; securityLog: enable: true apLogConf: &amp;ldquo;default/logconf&amp;rdquo; logDest: &amp;ldquo;syslog:server=127.</description>
    </item>
    
  </channel>
</rss>